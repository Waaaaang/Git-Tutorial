<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.spm.mapper.GoodsMapper">
  <!-- 상품 목록 -->
  	<select id="getList" resultType="com.spm.vo.GoodsVO">
  	 	<![CDATA[
  		select 
  			T.*
  		from 
  			(
  				select 
  					row_number() over(order by g.gdsNo desc) as num
  					,g.gdsNo
  					,g.gdsName
  					,g.cateCode
  					,g.gdsPrice
  					,g.gdsStock
  					,g.gdsDes
  					,g.gdsImg
  					,g.firstRegDate
  					,g.firstRegId
  					,g.fileId 
  					,f.uploadpath
  					,f.filename
  					,(SELECT AVG(r.score) FROM goods_reply r where r.gdsNo = g.gdsNo) AS avgScore
  					,g.goodsReplyCnt
  				from 
  					goods g 
  				left outer join goods_file f on g.fileId=f.fileId 	
  		]]>   
 				<trim prefix="where (" suffix=")" prefixOverrides="OR">
     				<foreach item='type' collection="typeArr">
     					<trim prefix="OR">
     						<choose>	<!-- if ~ else  -->
     							<when test="type == 'T'.toString()">
     								gdsName like '%'||#{keyword}||'%'
     							</when>
     							<when test="type == 'C'.toString()">
     								gdsDes like '%'||#{keyword}||'%'
     							</when>
     							<when test="type == 'W'.toString()">
     								gdsPrice like '%'||#{keyword}||'%'
     							</when>
     						</choose>
     					</trim>
     				</foreach>
   			   </trim>
 	    <![CDATA[   
			) T 
  	    where 
  	    	num between ((#{pageNum}-1) * #{amount})+1 and #{pageNum} *#{amount}
		]]>
  	</select>
  
  <!-- 상품 등록 -->
  	<insert id="insert">
  		insert into goods(gdsNo, gdsName, cateCode, gdsPrice, gdsStock, gdsDes, gdsImg, firstRegDate, firstRegId, fileId) 
  		 values (goods_seq.nextval, #{gdsName}, #{cateCode}, #{gdsPrice}, #{gdsStock}, #{gdsDes}, #{gdsImg}, sysdate, #{mberId}, #{fileId})
  	</insert>
  		
  <!-- 상품 상세 -->
  	<select id="detail" resultType="com.spm.vo.GoodsVO">
  		select  gdsNo, gdsName, cateCode, gdsPrice, gdsStock, gdsDes, gdsImg, firstRegDate, firstRegId, g.fileId, f.fileName, f.uploadPath
  			from goods g 
  				left outer join goods_file f on g.fileId=f.fileId
  					where gdsNo = #{gdsNo}
  	</select>
  
  <!-- 상품 삭제 -->
  	<delete id="delete">
  		delete from goods 
  			where gdsNo =#{gdsNo}
  	</delete>
  	
  	<!-- 상품 수정 -->
  	<update id="update">
  		update goods 
  			set gdsName=#{gdsName}, gdsPrice=#{gdsPrice}, gdsStock=#{gdsStock}, gdsDes=#{gdsDes}, gdsImg=#{gdsImg}, lastRegDate=sysdate, lastRegId=#{mberId}, fileId=#{fileId} 
  				where gdsNo= #{gdsNo}
  	</update>
  	
  	<!-- 총 상품 수 -->
  	<select id="getTotal" resultType="int">
  		select count(*) as totalCount 
  			from goods 
  				where
  					<trim prefix="(" suffix=") and" prefixOverrides="OR">
     					<foreach item='type' collection="typeArr">
     						<trim prefix="OR">
     							<choose>	<!-- if ~ else  -->
     								<when test="type == 'T'.toString()">
     									gdsName like '%'||#{keyword}||'%'
     								</when>
     								<when test="type == 'C'.toString()">
     									gdsDes like '%'||#{keyword}||'%'
     								</when>
     								<when test="type == 'W'.toString()">
     									gdsPrice like '%'||#{keyword}||'%'
     								</when>
     							</choose>
     						</trim>
     					</foreach>
   			   		</trim>
  				gdsNo > 0
  	</select>
  	
<!--   	<! 카테고리 (계층형 구조) --> 
<!--   	<select id="category" resultType="com.spm.vo.CategoryVO"> -->
<!--   		select level, cateName, cateCode, cateCodeRef  -->
<!--   			from goods_category  -->
<!--   				start with cateCodeRef is null connect by prior cateCode = cateCodeRef -->
<!--   	</select> -->
  	
  	<!-- 카트담기 -->
  	<insert id="addCart">
  		insert into tb_cart (cartNo,mberId,gdsNo,cartStock) 
  			values (tb_cart_seq.nextval, #{mberId}, #{gdsNo}, #{cartStock})
  	</insert>
  	
  	<!-- over() 분석함수 :: RANK, DENSE_RANK, ROW_NUMBER, NTILE -->
  	<!-- 장바구니 리스트 -->
  	<select id="cartList" resultType="com.spm.vo.CartVO">
 		select 
 			row_number() over(order by c.cartNo desc) as num
 			, c.cartNo
 			, c.mberId
 			, c.gdsNo
 			, c.cartStock
 			, c.addDate
 			, g.gdsName
 			, g.gdsPrice
 			, g.gdsImg
 			, g.fileId
 			, f.uploadPath
 			, f.fileName 
 			, (SELECT point FROM member m where c.mberId = m.mberId)
 		from 
 			tb_cart c 
 		inner join goods g on c.gdsNo = g.gdsNo 
 			left outer join goods_file f on g.fileId = f.fileId
 		where 
 			c.mberId = #{mberId}
  	</select>
  	
  	<!-- 카트목록삭제 -->
  	<delete id="deleteCart" >
  		delete from tb_cart 
  			where cartNo = #{cartNo} and mberId =#{mberId}
  	</delete>
  	
  	<!-- 카테고리별 리스트    -->  
	<select id="categoryList" resultType="com.spm.vo.GoodsVO">
		 select 
		 	g.gdsNo
		 	,g.gdsName
		 	, g.catecode
            ,c.code_Id
		 	,c.code_Nm
            ,d.det_code_Id
            ,d.det_code_nm
		 	, g.gdsPrice
		 	,g.gdsDes
		 	, g.gdsImg 
		 	, g.fileId
		 	, f.fileName
		 	, f.uploadPath
		 	,(SELECT AVG(r.score) FROM goods_reply r where r.gdsNo = g.gdsNo) AS avgScore
  			,g.goodsReplyCnt
		 from goods g 
          left outer join cmmn_detail_code d on d.det_code_Id = g.catecode
		 		left outer join cmmn_code c on c.code_Id = d.code_Id
                        left outer join goods_file f on g.fileId = f.fileId
		 where
		  	g.catecode = #{cateCode} or c.code_Id = #{cateCode} 
		order by gdsNo desc 
	</select>
	
	<!--  카테고리별 수량 -->
	<select id="categoryCount" resultType="int">
		select count(*) 
			from goods g 
				left outer join cmmn_detail_code d on d.det_code_Id = g.catecode
		 			left outer join cmmn_code c on c.code_Id = d.code_Id
					where  	g.catecode = #{cateCode} or c.code_Id = #{cateCode} 
	</select>
	
	<!-- 주문 -->
	<insert id="orderInfo">
		insert into oder(orderId,mberId,orderRec,addr1,detailAddr,orderPhone,amount) 
		 values (#{orderId},#{mberId},#{orderRec},#{addr1},#{detailAddr},#{orderPhone},#{amount})
	</insert>
	
	<!-- 주문과 상세정보는 각 상품의 정보를 제외하곤 모두 중복데이터이므로 두개의 테이블로 분류하여 중복최소화 -->
	<!-- 주문상세정보 -->
  	<insert id="orderInfo_Detail">
  		insert into oder_detail(orderDetailNo,orderId,gdsNo,cartStock) 
  		 	select oder_detail_seq.nextval, #{orderId}, gdsNo, cartStock 
  		 		from tb_cart where mberId = #{mberId}
  	</insert>
  	
  	<!-- 주문후 카트비우기 -->
  	<delete id="cartAllDelete">
  		delete tb_cart 
  			where mberId = #{mberId}
  	</delete>
  	
  	<!-- 유저의 주문 목록 -->
  	<select id="orderList" resultType="com.spm.vo.OrderVO">
  		select orderId, orderRec, addr1, detailAddr, orderPhone, amount , orderDate, delivery 
  			from oder 
  				where mberId = #{mberId} 
  					order by orderDate desc
  	</select>
  	
  	<!-- 관지라가 유저의 주문 목록 -->
  	<select id="adminList" resultType="com.spm.vo.OrderVO">
  		<![CDATA[
  			select
  				T.*
  			from
  				(
  					select
  						row_number() over(order by orderDate desc) as num
  						,orderId
  						, mberId
  						,orderRec
  						, addr1
  						, detailAddr
  						, orderPhone
  						, amount
  						, orderDate
  						, delivery 
  					from oder 
  	    		) T 
  	    	where 
  	    		num between ((#{pageNum}-1) * #{amount})+1 and #{pageNum} *#{amount}
		]]>
  	</select>
  	
  	<!-- 총 주문 수 -->
  	<select id="getOrderTotal" resultType="int">
  		select count(*) 
  			from oder 
  	</select>
  	
  	<!-- 주문한 상품번호와 따른 목록보기 -->
  	<select id="orderView" resultType="com.spm.vo.OrderListVO">
		select 
			o.orderId
			, o.mberId
			, o.orderRec
			, o.addr1
			, o.detailAddr
			, o.orderPhone
			, o.amount
			, o.orderDate
			, o.delivery
			,d.orderDetailNo
			, d.gdsNo
			, d.cartStock
			, g.gdsName
			, g.gdsImg
			, g.gdsPrice
			, g.fileId
			, f.fileName
			, f.uploadPath 
			, (select count(*) from goods_reply where gdsNo = d.gdsNo and firstRegId = o.mberId) AS replyCnt
		from 
			oder o 
		inner join oder_detail d on o.orderId = d.orderId 
		inner join goods g on d.gdsNo = g.gdsNo
		left outer join goods_file f on g.fileId = f.fileId
		where 
			o.orderId = #{orderId}
  	</select>
  	
  	<!-- 배송 상태 -->
  	<update id="delivery">
  		update oder 
  			set delivery =#{delivery} 
  				where orderId = #{orderId}
  	</update>
  	 
  	 <!-- 상품 수량 조절 -->
  	 <update id="changeStock">
  	 	update goods 
  	 		set gdsStock = gdsStock - #{gdsStock} 
  	 			where gdsNo = #{gdsNo}
  	 </update>
  	 
  	 <!-- 댓글 수 업데이트 -->
  	 <update id="updateReplyCnt">
  		update goods set goodsReplyCnt = goodsReplyCnt + #{amount} where gdsNo = #{gdsNo}
  	 </update>
  
  	<!-- 댓글 수 -->
  	<select id="getReplyCnt" resultType="int">
  		select goodsReplyCnt from goods where gdsNo = #{gdsNo}
  	</select>
  	
  	 <!-- 주문후 금액 업데이트 -->
   <update id="pointUpdate">
   		update 
   			member
   		set 
   			point = point - #{amount}
   		where mberId = #{mberId}
   </update>
</mapper>